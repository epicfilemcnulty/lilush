# _web_ module

  This is a high-level wrapper over the incorporated [LuaSocket][] module. 

  It provides:

    * simplified interface for the *HTTP(S)* request method
    * *HTTP/1.1* server and auxiliary functions

## HTTP Client

: request(`url`{.str}, `options`{.tbl} `{ method = "GET", body = "", headers = {} }`{.def .tbl}, `timeout`{.num} `1`{.def .num}) ➜ `response`{.tbl}

   Sends an HTTP(S) request to the `url`{.str}. 


## HTTP Server

: log(`msg`{.str}/`msg`{.tbl}, `level`{.str} `info`{.def .str})

   Prints a log `msg` in JSON format to `stdout`.
   
   
   When `msg`{.str} is a string, Lua table `{ ts = os.date(), level = level, msg = msg }`{.tbl} will be converted
   to JSON and printed out to `stdout`:

   ```lua
   local web = require("web")
   web.log("Log message", "warn")
   
    -- would output something like this to stdout:
    -- {"ts": "Tue Jan 20 10:17:11 2022", "level": "warn", "msg": "Log message"}
    ```

    When `msg`{.tbl} is a table, this table will be merged into Lua table `{ts = os.date(), level = level}`{.tbl}, 
    the result will be converted into JSON and printed out to `stdout`:

   ```lua
   local web = require("web")
   web.log({method = "GET", query = "/file.txt"})
   
    -- would output something like this to stdout:
    -- {"ts": "Tue Jan 20 10:17:11 2022", "level": "info", "method": "GET", "query": "/file.txt"}
    ```
   
: server(`ip`{.str} `127.0.0.1`{.def .str}, `port`{.num} `8080`{.def .num}, `handle`{.fn})

   Starts an HTTP server, listening on the `ip` and `port`.
   The `handle` function will be used to process every incoming request, and must have the following signature:
    
     : handle(`method`{.str .req}, `query`{.str .req}, `args`{.str}, `headers`{.tbl}, `body`{.str}) ➜ `body`{.str}, `status`{.num}, `headers`{.tbl} 

   For example, here is the code of a simple HTTP server to serve regular files from a specified directory,
   and to serve directory index upon `/` request:

    ```lua
    #!/bin/lilush

    local web = require("web")

    local root = os.getenv("WEBSERVER_ROOT")
    if not root then
        web.log("Set WEBSERVER_ROOT env var to point to the folder you want to serve", "error")
        os.exit(-1)
    end

    local handle = function(method, query, args, headers, body)
        local resp_headers = { ["content-type"] = "text/plain" }

        if query == "/" then
            local index = ""
            local files = std.list_files(root)
            for file, _ in pairs(files) do
                index = index .. "<a href='/" .. file .. "'>" .. file .. "</a><br>\n"
            end
            return index, 200, { ["content-type"] = "text/html" }
        end

        local file = root .. query
        if std.file_exists(file) then
            local content_type = web.mime_type(file)
            local content, err = std.read_file(file)
            if content then
                return content, 200, { ["content-type"] = content_type }
            else
                return "Internal Server Error: " .. err, 500, resp_headers
            end
        end
        return "Not Found", 404, resp_headers
    end

    web.server_config.access_log.headers = { "user-agent" }
    web.server("127.0.0.1", 8080, handle)
    ```
